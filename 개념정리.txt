버전관리 소프트웨어
git

git -init 으로 현재 폴더에 git명령어를 사용할 수 있게 함

git add 파일명으로 파일 현재상태를 기록
git commit -m '메모' 파일 현재상태 기록
-> 히스토리를 열람하고 확인 할 수 있음 띄어쓰기가 안되넹
두가지인 이유? 이미지는 버전을 관리할 필요가 없다.
git add로 기록할 파일을 고르고 (staging area로 보냄) staging 이라고 함
git commit으로 기록명령을 하는 것 (repository 로 저장)

동시에 해주는 명령어도 있긴함

두가지 파일을 동시에 스테이징 하고 싶다.
git add 파일1, 파일2 ;;;
git add . -> 모든 파일 스테이징

git status 
상태창 열기

git log --all --oneilne 으로 내가 commit 내역 조회

-> 기능을 완성했을 때 commit을 하는 것
( 저장마냥 하는게 아님 )
버전을 만들 수 있다.


commit 전에 파일 차이점을 확인하는 것도 좋음
현재 파일 vs 최근 commit 파일 확인

git diff 로 가능
스페이스바 ; 엔터키 등등 다 들어가서 정확하지 않을 수도 있ㅇ므

git difftool 로 시각적으로 양옆에두고 비교 가능
git difftool 커밋아이디로 현재파일 vs 특정 커밋 비교가능
git difftool 커밋아이디1, 커밋아이디2로 특정 vs 특정 비교가능

git config --global diff.tool vscode
git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'

git graph 라는 extension 설치해서 활용해도됨

새로운 기능을 만들고 싶을때!
원본을 막건들면 안될때
파일 복사본을 만들어서 코드 짜보면서 하면 안심이 될꺼임
branch 기능을 사용하자

원래 있던 소스코드는 두고 복사본에 먼저 개발하자.
git branch 브랜치 명 - 브랜치 생성
git switch 브랜치 명 - 브랜치로 이동

git status 로 확인가능

coupon branch 에 새로운 파일을 만듬

우리가 코드를 짜던 곳은 메인(마스터)브랜치임

git merge 로 브랜치를 합칠 수 있음
잘 되어있다면 괜찮은데 
그러나 같은 곳을 수정했다면 conflict 가 뜨게 됨
-> conflict를 해결해 줘야함
그냥 원하는 코드만 두고 commit 을 하면 됨