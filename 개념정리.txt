버전관리 소프트웨어
git

git -init 으로 현재 폴더에 git명령어를 사용할 수 있게 함

git add 파일명으로 파일 현재상태를 기록
git commit -m '메모' 파일 현재상태 기록
-> 히스토리를 열람하고 확인 할 수 있음 띄어쓰기가 안되넹
두가지인 이유? 이미지는 버전을 관리할 필요가 없다.
git add로 기록할 파일을 고르고 (staging area로 보냄) staging 이라고 함
git commit으로 기록명령을 하는 것 (repository 로 저장)

동시에 해주는 명령어도 있긴함

두가지 파일을 동시에 스테이징 하고 싶다.
git add 파일1, 파일2 ;;;
git add . -> 모든 파일 스테이징

git status 
상태창 열기

git log --all --oneilne 으로 내가 commit 내역 조회

-> 기능을 완성했을 때 commit을 하는 것
( 저장마냥 하는게 아님 )
버전을 만들 수 있다.


commit 전에 파일 차이점을 확인하는 것도 좋음
현재 파일 vs 최근 commit 파일 확인

git diff 로 가능
스페이스바 ; 엔터키 등등 다 들어가서 정확하지 않을 수도 있ㅇ므

git difftool 로 시각적으로 양옆에두고 비교 가능
git difftool 커밋아이디로 현재파일 vs 특정 커밋 비교가능
git difftool 커밋아이디1, 커밋아이디2로 특정 vs 특정 비교가능

git config --global diff.tool vscode
git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'

git graph 라는 extension 설치해서 활용해도됨

새로운 기능을 만들고 싶을때!
원본을 막건들면 안될때
파일 복사본을 만들어서 코드 짜보면서 하면 안심이 될꺼임
branch 기능을 사용하자

원래 있던 소스코드는 두고 복사본에 먼저 개발하자.
git branch 브랜치 명 - 브랜치 생성
git switch 브랜치 명 - 브랜치로 이동

git status 로 확인가능

coupon branch 에 새로운 파일을 만듬

우리가 코드를 짜던 곳은 메인(마스터)브랜치임

git merge 로 브랜치를 합칠 수 있음
잘 되어있다면 괜찮은데 
그러나 같은 곳을 수정했다면 conflict 가 뜨게 됨
-> conflict를 해결해 줘야함
그냥 원하는 코드만 두고 commit 을 하면 됨

branch 는 협업시 굉장히 중요함
branch 는 합쳐도 그대로임 삭제가ㅑ 되지 않음
-> merge를 하면 일반적으로 삭제
git branch -d  merge 한거
git branch -D  안한거 삭제

branch를 합치는 여러가지 방법

1. 각 브랜치에 신규 commit이 있는 경우
-> 3way merge
2. 기존 브랜치에 신규 commit이 없는 경우
-> fast-forward merge ;; 신규 브랜치의 이름을 메인 브랜치로 바꿈
3. rebase ; 
기존, 신규 브랜치에 commit이 있는 경우 ; 3way merge를 쓸수도 있지만
신규 브랜치의 commit을 rebase하여 기존 브랜치의 commit뒤로 넘기고, fast-forward merge를 진행한다.
왜 쓰느냐; branch가 너무 많을 때 자잘한 것도 3way merge하면 log가 너무 복잡해짐
-> 간단하고 짧은 브랜치들은 rebase 하는게 보기 편함
--;; 단점 ; conflict가 너무 많이 남
git rebase master;; 새로운 브랜치로 이동해서 사용
이후 get merge 신규 브랜치 ( fast-forward merge)
4. squash and merge
3 way merge를 막갈기면 graph 가 너무 어려워보임
합쳐진것도 쓸데없는게 너무 많아짐
git merge --squash 를 하게되면 신규 브랜치가 합쳐지면서 main branch에 합쳐지지만
log가 남지않음 * 3way merge와 달리 텔레포트라고 생각하는게 나음
-- 안중요한건 squash 

---
파일 복구
git restore 파일명 -> 최근 commit으로 파일명 변경
git restore --source 커밋아이디 파일명 -> 커밋아이디의 상태로 파일 변경
git restore --staged 파일명 -> staging 상태 취소

commit 복구
과거 조작은 불가능하지만 작업은 취소할 수 있음
git revert 커밋아이디1 2
git revert HEAD 방금한 commit(revert포함)도 이렇게 복구가능
merge로 생성된 commit도 가능
'commit'만 취소하는 것이라서
a, b, c에서 b 커밋을 취소해도 c 커밋은 그대로 있음

시간을 되돌리기
git reset --hard 커밋아이디
git reset --soft 커밋 아이디 -> 변동사항 지우지 말고 스테이징
git reset --mixed 변동사항 지우지말고 unstage해놓기
커밋아이디의 시점으로 돌아감  ---> 혼자할때만 쓰자

-------------------
git이 파일 기록해두는 장소 ; repository
local에도 파일이 있지만 .git폴더
온라인 repository 도 만들어둠 for 안정성 and 협업가능
원격저장소
git init == repository를 만들어주는 용어
