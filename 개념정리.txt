버전관리 소프트웨어
git

git -init 으로 현재 폴더에 git명령어를 사용할 수 있게 함

git add 파일명으로 파일 현재상태를 기록
git commit -m '메모' 파일 현재상태 기록
-> 히스토리를 열람하고 확인 할 수 있음 띄어쓰기가 안되넹
두가지인 이유? 이미지는 버전을 관리할 필요가 없다.
git add로 기록할 파일을 고르고 (staging area로 보냄) staging 이라고 함
git commit으로 기록명령을 하는 것 (repository 로 저장)

동시에 해주는 명령어도 있긴함

두가지 파일을 동시에 스테이징 하고 싶다.
git add 파일1, 파일2 ;;;
git add . -> 모든 파일 스테이징

git status 
상태창 열기

git log --all --oneilne 으로 내가 commit 내역 조회

-> 기능을 완성했을 때 commit을 하는 것
( 저장마냥 하는게 아님 )
버전을 만들 수 있다.


commit 전에 파일 차이점을 확인하는 것도 좋음
현재 파일 vs 최근 commit 파일 확인

git diff 로 가능
스페이스바 ; 엔터키 등등 다 들어가서 정확하지 않을 수도 있ㅇ므

git difftool 로 시각적으로 양옆에두고 비교 가능
git difftool 커밋아이디로 현재파일 vs 특정 커밋 비교가능
git difftool 커밋아이디1, 커밋아이디2로 특정 vs 특정 비교가능

git config --global diff.tool vscode
git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'

git graph 라는 extension 설치해서 활용해도됨

새로운 기능을 만들고 싶을때!
원본을 막건들면 안될때
파일 복사본을 만들어서 코드 짜보면서 하면 안심이 될꺼임
branch 기능을 사용하자

원래 있던 소스코드는 두고 복사본에 먼저 개발하자.
git branch 브랜치 명 - 브랜치 생성
git switch 브랜치 명 - 브랜치로 이동

git status 로 확인가능

coupon branch 에 새로운 파일을 만듬

우리가 코드를 짜던 곳은 메인(마스터)브랜치임

git merge 로 브랜치를 합칠 수 있음
잘 되어있다면 괜찮은데 
그러나 같은 곳을 수정했다면 conflict 가 뜨게 됨
-> conflict를 해결해 줘야함
그냥 원하는 코드만 두고 commit 을 하면 됨

branch 는 협업시 굉장히 중요함
branch 는 합쳐도 그대로임 삭제가ㅑ 되지 않음
-> merge를 하면 일반적으로 삭제
git branch -d  merge 한거
git branch -D  안한거 삭제

branch를 합치는 여러가지 방법

1. 각 브랜치에 신규 commit이 있는 경우
-> 3way merge
2. 기존 브랜치에 신규 commit이 없는 경우
-> fast-forward merge ;; 신규 브랜치의 이름을 메인 브랜치로 바꿈
3. rebase ; 
기존, 신규 브랜치에 commit이 있는 경우 ; 3way merge를 쓸수도 있지만
신규 브랜치의 commit을 rebase하여 기존 브랜치의 commit뒤로 넘기고, fast-forward merge를 진행한다.
왜 쓰느냐; branch가 너무 많을 때 자잘한 것도 3way merge하면 log가 너무 복잡해짐
-> 간단하고 짧은 브랜치들은 rebase 하는게 보기 편함
--;; 단점 ; conflict가 너무 많이 남
git rebase master;; 새로운 브랜치로 이동해서 사용
이후 get merge 신규 브랜치 ( fast-forward merge)
4. squash and merge
3 way merge를 막갈기면 graph 가 너무 어려워보임
합쳐진것도 쓸데없는게 너무 많아짐
git merge --squash 를 하게되면 신규 브랜치가 합쳐지면서 main branch에 합쳐지지만
log가 남지않음 * 3way merge와 달리 텔레포트라고 생각하는게 나음
-- 안중요한건 squash 

---
파일 복구
git restore 파일명 -> 최근 commit으로 파일명 변경
git restore --source 커밋아이디 파일명 -> 커밋아이디의 상태로 파일 변경
git restore --staged 파일명 -> staging 상태 취소

commit 복구
과거 조작은 불가능하지만 작업은 취소할 수 있음
git revert 커밋아이디1 2
git revert HEAD 방금한 commit(revert포함)도 이렇게 복구가능
merge로 생성된 commit도 가능
'commit'만 취소하는 것이라서
a, b, c에서 b 커밋을 취소해도 c 커밋은 그대로 있음

시간을 되돌리기
git reset --hard 커밋아이디
git reset --soft 커밋 아이디 -> 변동사항 지우지 말고 스테이징
git reset --mixed 변동사항 지우지말고 unstage해놓기
커밋아이디의 시점으로 돌아감  ---> 혼자할때만 쓰자

-------------------
git이 파일 기록해두는 장소 ; repository
local에도 파일이 있지만 .git폴더
온라인 repository 도 만들어둠 for 안정성 and 협업가능
원격저장소
git init == repository를 만들어주는 용어

main branch로 사용 - git branch -M main

git push -u 원격저장소주소 올릴로컬브랜치명
원격저장소에 backup을 할 수 가 있따
-u 는 주소를 기억하라는 뜻 -> 알아서 해줌
원격저장소 url을 변수로 저장할 수 있음
git remote add 변수명 저장내용


타인과 협업도 할 수 있다!!
친구1
원격저장소에서 zip파일로 다운받을 수 있음
간단한방법 ;
git clone 원격저장소주소 
-> 원격저장소에 있던거 그대로 내려받기
모든 소스코드가 다운받아짐
git push를하려면 팀원을 깃헙아이디에 등록해놔야지 가능함
근데 원격저장소에 새로운게 생기면 gitpush를 하지못함
이미 git push를 한 이력이 있으면 git push를 하지 못함
-> 에러가 뜸
이럴떄는 git pull을 하면됨
git pull 은 원격저장소의 내용을 지금의 내용과 합쳐줌

git push의 조건은 원격저장소 최신내용이 로컬저장소에 있을 때만 git push를 할 수 있다.

git pull origin 브랜치명 도 가능

git pull == git fetch + git merge
            ( 신규 commit가져오세요 + 내 브랜치에 merge)
-> merge conflict도 날 수 있다.

브랜치로 협업하기
브랜치 만들어서 개발하고 merge하는게 더 안정적임
위의 방법은 그냥 main브랜치에 바로바로 갈기는 거랑 같음
github에 브랜치를 만들수 있고 관리도 가능하다.

새로운 브랜치를 push하려면 git push origin 브랜치명 
하면됨
브랜치이름의 중복은 알아서 피하자
merge를 하고 싶으면?
로컬에서 merge해서 push를 하거나
github(원격)안에서 merge를 하면됨 --> online에서 진행하면 검토를 할 수 있음

pull request 로 merge를 요청하여 협업자들과 평가를 내리고 conflict를 해결하면됨
online에서 merge할때도 마찬가지로 3way, squash, rebase할 수 있다.


.gitignore파일에 저장소에 올리지않을 파일을 명시할 수 있음
-> git add .해도 스테이징이 되지않음 (commit되지않음)

프로젝트가 커져도 branch; merge를 깔끔하게 하고 싶다
->상황에 맞는 개발전략 
GifFlow
main 안전
develop(복사본) - 신기능 개발
feature/기능이름 - 신기능 개발후 잘되면 develop에 merge
release(임시 main브랜치 ) -develop 완성되면 테스트 -> main에 배포
hotix - main에서 버그가 발생시 바쁘게 hotfix

trunk-based - 브랜치 하나만 잘관리하자
main 
feature - 신기능 개발하고 바로 main에 merge

-----
코드를 개발을 하던 중 잠깐 보관을 하고 싶다.
git stash 

옮겨지면 최근 commit과의 차이점을 전부 보관해줌
파일의 경우는 stash가 안될 수 도 있음
git stash save '메모내용' -> 메모와함계 보관
git stash pop -> stash했던 내용 불러옴